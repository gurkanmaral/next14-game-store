// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}


model User {
  id            String    @id @default(cuid())
  name          String?   
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  comments      Comment[]
  rate          Rate[]
  orders            Order[]

  wishlistGames  Game[] @relation("WishlistGames")
  favoriteGames  Game[] @relation("FavoriteGames")

  likedComments CommentLike[]

  blocking Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")
  following Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")
}

model Order {
  id            String   @id @default(cuid())
  userId        String
  stripeId      String    @unique
  purchaseDate  DateTime  @default(now())
  total         String
  boughtGames   BoughtGame[]
  user          User      @relation(fields: [userId], references: [id])

}
model BoughtGame {
  id        String   @id @default(cuid())
  orderId   String  
  gameId    String
  order     Order    @relation(fields: [orderId], references: [id])
 
}


model Account {
  id                 String @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}


model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}
model TwoFactorToken {

  id String @id @default(cuid())
  email String
  token String @unique
   expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
    id String @id @default(cuid())
    userId String
    user User @relation(fields:[userId], references: [id],onDelete: Cascade)

    @@unique([userId])
}

model Game {
  id            String    @id @default(cuid())
  title         String
  price         String
  allImages     String[]
  SpecialPrice  String
  description   String    @db.Text
  Genres        String[]
  metacritic    String
  released      String
  comments      Comment[]
  platforms     String[]
  rate          Rate[]
  developer     String

  usersWishlist  User[] @relation("WishlistGames")
  usersFavorites User[] @relation("FavoriteGames")
}

model Comment {
id             String    @id @default(cuid())
userId         String
gameId         String
review         String
parentId       String?
likes          CommentLike[]
createdAt      DateTime @default(now())
parent         Comment? @relation("ChildComments", fields: [parentId], references: [id], onDelete: Cascade)

children       Comment[] @relation("ChildComments")
game Game @relation(fields: [gameId],references: [id],onDelete: Cascade)
user User @relation(fields: [userId],references: [id],onDelete: Cascade)

}

model CommentLike {
  id         String @id @default(cuid())
  userId     String
  commentId  String
  createdAt  DateTime @default(now())
  comment   Comment   @relation(fields: [commentId], references: [id],onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])

}
model Rate {
  id            String    @id @default(cuid())
  userId        String
  gameId        String 
  rate          Float
  
game Game @relation(fields: [gameId],references: [id],onDelete: Cascade)
user User @relation(fields: [userId],references: [id],onDelete: Cascade)

@@unique([userId,gameId])
}

model Follow {
  id String @id @default(uuid())
  followerId String
  followingId String

  follower User @relation(name:"Following", fields: [followerId],references: [id], onDelete: Cascade)
  following User @relation(name:"FollowedBy", fields: [followingId],references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId,followingId])
  @@index([followerId])
  @@index([followingId])

}

model Block {
  id String @id @default(uuid())
  blockerId String
  blockedId String

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}